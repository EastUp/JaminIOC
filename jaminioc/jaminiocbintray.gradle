
ext {
    bintrayRepo = 'jaminioc'
    bintrayPackageName = 'jaminioc'

    publishedGroupId = 'com.east'               // 唯一包名，比如compile 'com.yanzhenjie:andserver:1.0.1'中的com.yanzhenjie就是这里配置的。
    libraryName = 'jaminioc'
    artifact = 'jaminioc'

    libraryDescription = 'a ioc library for android'

    siteUrl = 'https://github.com/EastUp/JaminIOC'
    gitUrl = 'https://github.com/EastUp/JaminIOC.git'

    libraryVersion = '1.0.2'        // 项目引用的版本号，比如compile 'com.yanzhenjie:andserver:1.0.1'中的1.0.1就是这里配置的。

    developerId = 'east'
    developerName = 'east'
    developerEmail = 'eastrisewm@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}


group = publishedGroupId
version = libraryVersion

install {
    repositories.mavenInstaller {
        // 生成pom.xml和参数
        pom.project {
            packaging 'aar'
            // 项目描述，复制我的话，这里需要修改。
            groupId publishedGroupId
            artifactId artifact

            name libraryName     // 可选，项目名称。
            description libraryDescription  // 可选，项目描述。
            url siteUrl     // 项目主页，这里是引用上面定义好。

            // 软件开源协议，现在一般都是Apache License2.0吧，复制我的，这里不需要修改。
            licenses {
                license {
                    name licenseName
                    url licenseUrl
                }
            }

            //填写开发者基本信息，复制我的，这里需要修改。
            developers {
                developer {
                    id developerId          // 开发者的id。
                    name developerName          // 开发者名字。
                    email developerEmail         // 开发者邮箱。
                }
            }
            // SCM，复制我的，这里不需要修改。
            scm {
                connection gitUrl       // Git仓库地址。
                developerConnection gitUrl  // Git仓库地址。
                url siteUrl     // 项目主页。
            }

            pom.withXml {
                writePom(asNode())
            }
        }
    }
}

void writePom(node) {
    def allDependencies = new HashSet<DependencySet>()
    allDependencies.addAll(configurations.api.allDependencies)
    allDependencies.addAll(configurations.releaseApi.allDependencies)
    allDependencies.addAll(configurations.implementation.allDependencies)
    allDependencies.addAll(configurations.releaseImplementation.allDependencies)
    def iterator = allDependencies.iterator()
    while (iterator.hasNext()) {
        def dep = iterator.next()
        //移除project类型的依赖
        if (dep.name == "unspecified" || dep.version == "unspecified") {
            iterator.remove()
        }
    }

    def depsNode = node.appendNode('dependencies')
    allDependencies.each { dep ->
        def depNode = depsNode.appendNode('dependency')
        depNode.appendNode('groupId', dep.group)
        depNode.appendNode('artifactId', dep.name)
        depNode.appendNode('version', dep.version)
        depNode.appendNode('scope', 'compile')
    }
}

// 生成jar包的task，不需要修改。
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}
// 生成jarDoc的task，不需要修改。
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    // destinationDir = file("../javadoc/")
    failOnError false // 忽略注释语法错误，如果用jdk1.8你的注释写的不规范就编译不过。
    options.encoding = "UTF-8"
}
// 生成javaDoc的jar，不需要修改。
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// 这里是读取Bintray相关的信息，我们上传项目到github上的时候会把gradle文件传上去，
// 所以不要把帐号密码的信息直接写在这里，写在local.properties中，这里动态读取。
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo             // 上传到maven库。（这里要特别注意，如果写了maven报404错误，请在bintray创建一个仓库，这里填改成你创建的仓库的名字，如何创建请看下图。）
        name = bintrayPackageName          // 发布到Bintray上的项目名字，这里的名字不是compile 'com.yanzhenjie:andserver:1.0.1'中的andserver。
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        dryRun = false
        publish = true              // 是否是公开项目。
        override = false
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
        }
    }
}
